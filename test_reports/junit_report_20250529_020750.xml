<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="7" skipped="1" tests="10" time="5332.434" timestamp="2025-05-29T02:07:51.366283+05:30" hostname="DESKTOP-P3MSMOS"><testcase classname="tests.test_security.TestInputValidation" name="test_sql_injection_prevention" time="0.039"><failure message="AttributeError: 'DatabaseManager' object has no attribute 'get_search_session'. Did you mean: 'create_search_session'?">self = &lt;tests.test_security.TestInputValidation object at 0x0000028064355DC0&gt;
db_manager = &lt;database.models.DatabaseManager object at 0x00000280649B2480&gt;

    @pytest.mark.security
    def test_sql_injection_prevention(self, db_manager):
        """Test SQL injection prevention in database queries."""
        # Test malicious search terms
        malicious_inputs = [
            "'; DROP TABLE search_sessions; --",
            "' OR '1'='1",
            "'; DELETE FROM reddit_mentions; --",
            "' UNION SELECT * FROM search_sessions --",
            "admin'--",
            "' OR 1=1#"
        ]
    
        for malicious_input in malicious_inputs:
            # Should handle malicious input safely
            session_id = db_manager.create_search_session(malicious_input)
            assert session_id is not None
    
            # Verify the malicious input was sanitized or handled safely
&gt;           session = db_manager.get_search_session(session_id)
E           AttributeError: 'DatabaseManager' object has no attribute 'get_search_session'. Did you mean: 'create_search_session'?

tests\test_security.py:37: AttributeError</failure></testcase><testcase classname="tests.test_security.TestInputValidation" name="test_xss_prevention" time="0.367"><failure message="AttributeError: 'ValidationResult' object has no attribute 'sanitized_data'">self = &lt;tests.test_security.TestInputValidation object at 0x00000280649B07A0&gt;
data_validator = &lt;analytics.data_validator.DataValidator object at 0x0000028065B3C800&gt;

    @pytest.mark.security
    def test_xss_prevention(self, data_validator):
        """Test XSS prevention in content validation."""
        xss_payloads = [
            "&lt;script&gt;alert('XSS')&lt;/script&gt;",
            "javascript:alert('XSS')",
            "&lt;img src=x onerror=alert('XSS')&gt;",
            "&lt;svg onload=alert('XSS')&gt;",
            "';alert('XSS');//",
            "&lt;iframe src='javascript:alert(\"XSS\")'&gt;&lt;/iframe&gt;"
        ]
    
        for payload in xss_payloads:
            mention_data = {
                'reddit_id': 'xss_test',
                'title': payload,
                'content': f"Content with {payload}",
                'author': 'test_user',
                'subreddit': 'test'
            }
    
            # Validation should detect and handle XSS attempts
            result = data_validator.validate_mention(mention_data)
    
            # Should either reject the content or sanitize it
            if result.is_valid:
                # If accepted, should be sanitized
&gt;               assert '&lt;script&gt;' not in result.sanitized_data.get('title', '')
E               AttributeError: 'ValidationResult' object has no attribute 'sanitized_data'

tests\test_security.py:69: AttributeError</failure></testcase><testcase classname="tests.test_security.TestInputValidation" name="test_command_injection_prevention" time="0.036"><failure message="AssertionError: assert (';' not in '; ls -la'&#10;  &#10;  ';' is contained here:&#10;    ; ls -la&#10;  ? + or '; ls -la' == ''&#10;  &#10;  + ; ls -la)">self = &lt;tests.test_security.TestInputValidation object at 0x00000280649B0890&gt;

    @pytest.mark.security
    def test_command_injection_prevention(self):
        """Test command injection prevention."""
        command_injection_payloads = [
            "; ls -la",
            "| cat /etc/passwd",
            "&amp;&amp; rm -rf /",
            "`whoami`",
            "$(id)",
            "; ping google.com"
        ]
    
        scraper = RedditScraper(Mock())
    
        for payload in command_injection_payloads:
            # Should sanitize search terms to prevent command injection
            sanitized = scraper._sanitize_search_term(payload)
    
            # Should not contain command injection characters
            dangerous_chars = [';', '|', '&amp;', '`', '$', '(', ')']
            for char in dangerous_chars:
                if char in payload:
&gt;                   assert char not in sanitized or sanitized == ""
E                   AssertionError: assert (';' not in '; ls -la'
E                     
E                     ';' is contained here:
E                       ; ls -la
E                     ? + or '; ls -la' == ''
E                     
E                     + ; ls -la)

tests\test_security.py:94: AssertionError</failure></testcase><testcase classname="tests.test_security.TestInputValidation" name="test_path_traversal_prevention" time="0.001"><failure message="AssertionError: assert '..' not in '../../../etc/passwd'&#10;  &#10;  '..' is contained here:&#10;    ../../../etc/passwd&#10;  ? ++">self = &lt;tests.test_security.TestInputValidation object at 0x00000280649B09E0&gt;

    @pytest.mark.security
    def test_path_traversal_prevention(self):
        """Test path traversal prevention."""
        path_traversal_payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\config\\sam",
            "....//....//....//etc//passwd",
            "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
            "..%252f..%252f..%252fetc%252fpasswd"
        ]
    
        # Test in various contexts where file paths might be used
        for payload in path_traversal_payloads:
            # Should not allow path traversal in any file operations
&gt;           assert ".." not in payload.replace("%2e", ".").replace("%252e", ".")
E           AssertionError: assert '..' not in '../../../etc/passwd'
E             
E             '..' is contained here:
E               ../../../etc/passwd
E             ? ++

tests\test_security.py:110: AssertionError</failure></testcase><testcase classname="tests.test_security.TestDataProtection" name="test_sensitive_data_handling" time="0.012"><failure message="TypeError: DatabaseManager.add_mention() takes 2 positional arguments but 3 were given">self = &lt;tests.test_security.TestDataProtection object at 0x00000280649B0A40&gt;
db_manager = &lt;database.models.DatabaseManager object at 0x000002806A3680B0&gt;

    @pytest.mark.security
    def test_sensitive_data_handling(self, db_manager):
        """Test handling of sensitive data."""
        # Test with potentially sensitive information
        sensitive_mention = {
            'reddit_id': 'sensitive_test',
            'title': 'Post with email user@example.com and phone 555-1234',
            'content': 'SSN: 123-45-6789, Credit Card: 4111-1111-1111-1111',
            'author': 'test_user',
            'subreddit': 'test',
            'score': 10,
            'num_comments': 5,
            'created_utc': datetime.utcnow(),
            'sentiment_score': 0.5,
            'relevance_score': 0.7
        }
    
        session_id = db_manager.create_search_session("sensitive_test")
&gt;       mention_id = db_manager.add_mention(session_id, sensitive_mention)
E       TypeError: DatabaseManager.add_mention() takes 2 positional arguments but 3 were given

tests\test_security.py:134: TypeError</failure></testcase><testcase classname="tests.test_security.TestDataProtection" name="test_data_encryption_at_rest" time="0.008"><skipped type="pytest.skip" message="Data encryption not implemented">C:\Users\Devansh\Downloads\intern_application_round1\tests\test_security.py:160: Data encryption not implemented</skipped></testcase><testcase classname="tests.test_security.TestDataProtection" name="test_access_control" time="0.011"><failure message="AttributeError: 'DatabaseManager' object has no attribute 'get_search_session'. Did you mean: 'create_search_session'?">self = &lt;tests.test_security.TestDataProtection object at 0x00000280649B0F20&gt;
db_manager = &lt;database.models.DatabaseManager object at 0x000002806A36ACC0&gt;

    @pytest.mark.security
    def test_access_control(self, db_manager):
        """Test access control mechanisms."""
        # Test that unauthorized access is prevented
        # This would be more relevant with user authentication
    
        # Create a session
        session_id = db_manager.create_search_session("access_test")
    
        # Verify session exists
&gt;       session = db_manager.get_search_session(session_id)
E       AttributeError: 'DatabaseManager' object has no attribute 'get_search_session'. Did you mean: 'create_search_session'?

tests\test_security.py:172: AttributeError</failure></testcase><testcase classname="tests.test_security.TestRateLimiting" name="test_scraper_rate_limiting" time="0.030"><failure message="AssertionError: assert False&#10; +  where False = hasattr(&lt;asyncio_throttle.throttler.Throttler object at 0x00000280682F5730&gt;, 'min_interval')&#10; +    where &lt;asyncio_throttle.throttler.Throttler object at 0x00000280682F5730&gt; = &lt;scraper.reddit_scraper.RedditScraper object at 0x00000280682F5EB0&gt;.throttler">self = &lt;tests.test_security.TestRateLimiting object at 0x00000280649B1070&gt;

    @pytest.mark.security
    def test_scraper_rate_limiting(self):
        """Test scraper rate limiting."""
        scraper = RedditScraper(Mock())
    
        # Verify rate limiting is configured
        assert hasattr(scraper, 'throttler')
&gt;       assert hasattr(scraper.throttler, 'min_interval')
E       AssertionError: assert False
E        +  where False = hasattr(&lt;asyncio_throttle.throttler.Throttler object at 0x00000280682F5730&gt;, 'min_interval')
E        +    where &lt;asyncio_throttle.throttler.Throttler object at 0x00000280682F5730&gt; = &lt;scraper.reddit_scraper.RedditScraper object at 0x00000280682F5EB0&gt;.throttler

tests\test_security.py:190: AssertionError</failure></testcase><testcase classname="tests.test_security.TestRateLimiting" name="test_database_connection_limits" time="0.008" /><testcase time="0.000" /><testcase classname="pytest" name="internal" time="0.000"><error message="internal error">Traceback (most recent call last):
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\main.py", line 283, in wrap_session
    session.exitstatus = doit(config, session) or 0
                         ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\main.py", line 337, in _main
    config.hook.pytest_runtestloop(session=session)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_hooks.py", line 513, in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_manager.py", line 120, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 182, in _multicall
    return outcome.get_result()
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_result.py", line 100, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 167, in _multicall
    teardown.throw(outcome._exception)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\logging.py", line 803, in pytest_runtestloop
    return (yield)  # Run all the tests.
            ^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 167, in _multicall
    teardown.throw(outcome._exception)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\terminal.py", line 673, in pytest_runtestloop
    result = yield
             ^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 103, in _multicall
    res = hook_impl.function(*args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\main.py", line 362, in pytest_runtestloop
    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_hooks.py", line 513, in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_manager.py", line 120, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 139, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 122, in _multicall
    teardown.throw(exception)  # type: ignore[union-attr]
    ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\warnings.py", line 112, in pytest_runtest_protocol
    return (yield)
            ^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 122, in _multicall
    teardown.throw(exception)  # type: ignore[union-attr]
    ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\assertion\__init__.py", line 176, in pytest_runtest_protocol
    return (yield)
            ^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 122, in _multicall
    teardown.throw(exception)  # type: ignore[union-attr]
    ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\unittest.py", line 429, in pytest_runtest_protocol
    res = yield
          ^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 122, in _multicall
    teardown.throw(exception)  # type: ignore[union-attr]
    ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\faulthandler.py", line 88, in pytest_runtest_protocol
    return (yield)
            ^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 103, in _multicall
    res = hook_impl.function(*args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\runner.py", line 113, in pytest_runtest_protocol
    runtestprotocol(item, nextitem=nextitem)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\runner.py", line 132, in runtestprotocol
    reports.append(call_and_report(item, "call", log))
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\runner.py", line 246, in call_and_report
    ihook.pytest_runtest_logreport(report=report)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_hooks.py", line 513, in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_manager.py", line 120, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 139, in _multicall
    raise exception.with_traceback(exception.__traceback__)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\pluggy\_callers.py", line 103, in _multicall
    res = hook_impl.function(*args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\terminal.py", line 651, in pytest_runtest_logreport
    self._write_progress_information_filling_space()
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\terminal.py", line 721, in _write_progress_information_filling_space
    self.write(msg.rjust(fill), flush=True, **{color: True})
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\terminal.py", line 494, in write
    self._tw.write(content, flush=flush, **markup)
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\_io\terminalwriter.py", line 177, in write
    self.flush()
  File "C:\Users\Devansh\AppData\Roaming\Python\Python312\site-packages\_pytest\_io\terminalwriter.py", line 184, in flush
    self._file.flush()
OSError: [Errno 22] Invalid argument</error></testcase></testsuite></testsuites>